#include <stdio.h>
#define max 10
void MaoPao(int a[]){
int i,j;
int swap;
for(i=0;i<max-1;i++){
	for(j=0;j<max-1-i;j++){
		if(a[j+1]<a[j]){
			swap=a[j];
			a[j]=a[j+1];
			a[j+1]=swap;
		}
	}
}
}
void main(){
int a[max],i;
for(i=0;i<max;i++){
	scanf("%d",&a[i]);
}
MaoPao(a);
for(i=0;i<max;i++){
	printf("%d ",a[i]);
}
}
#include <stdio.h>
#define max 100
struct src{
	int v;        //结点
	int shortest; //权值
};
/*
普利姆算法：
目的：根据图的邻接矩阵表示出图的最小生成树
思想：用局部构造整体
设置两个集合分别放顶点和边，初始为空
选定图中的一个顶点为起始顶点开始构造最小生成树
从顶点集合和剩下顶点中选取权值最先的两个顶点
将非顶点集合中的顶点加入顶点集合中，将这两个顶点的边加入边的集合
重复上述操作直到选取了(顶点-1)条边
参数说明：
LJJZ：图的邻接矩阵
Point_Sum：结点个数
G：辅佐数组
*/
void Prim(int LJJZ[][max],int Point_Sum,struct src G[]){
int i,j,k;          //辅助变量 
int min;            //存放G中最小的权值
for(i=1;i<Point_Sum;i++){ //
min=1000;           //min的值必须大于等于邻接矩阵中两结点不存在的值
for(j=1;j<Point_Sum;j++){
	if(G[j].shortest<min&&G[j].shortest>0){
		min=G[j].shortest;  //获得G中的最先权值
		k=j;
	}
}
printf("%d--%d\n",G[k].v,k);
G[k].shortest=0;
//更新G
for(j=0;j<Point_Sum;j++){ 
	if(LJJZ[k][j]<G[j].shortest){
		G[j].shortest=LJJZ[k][j];
		G[j].v=k;
	}
}
}
}
void main(){
int i,j;
int Point_Sum;
int LJJZ[max][max];
struct src G[max];
printf("请输入图的结点数：\n");
scanf("%d",&Point_Sum);
printf("请输入图的邻接矩阵,无穷以1000表示：\n");
for(i=0;i<Point_Sum;i++){
	for(j=0;j<Point_Sum;j++){
	scanf("%d",&LJJZ[i][j]);
	}
}
G[0].shortest=0;
G[0].v=0;
for(i=1;i<Point_Sum;i++){
	G[i].shortest=LJJZ[0][i];
	G[i].v=0;
}
Prim(LJJZ,Point_Sum,G);
}
/*
汉诺塔问题：
已知汉诺塔上有指针若干，从小到大排序在a杆子上
现要求将a上的指针经b移动到c上，每次只能移动一个指针
并且大的不能在小的上面
思想：采用递归，入栈操作
*/
void HanNuo(char a,char b,char c,int DishNumber){
	if(DishNumber==1){
		printf("%c-->%c\n",a,c);
	}
	else{
		HanNuo(a,c,b,DishNumber-1);
		printf("%c-->%c\n",a,c);
		HanNuo(b,a,c,DishNumber-1);
	}
}
void main(){
int DishNumber;
char a='a',b='b',c='c';
printf("请输入汉诺塔上的指针数：\n");
scanf("%d",&DishNumber);
printf("步骤为：\n");
HanNuo(a,b,c,DishNumber);
}
#include <stdio.h>
#include <stdlib.h>
#define Max 100
//插入排序
void Insert(int Data[],int nNum){
	int i,j,k,Temp;
	for(i=0;i<nNum;i++){
		Temp=Data[i];
		for(j=0;j<=i;j++){
			if(Data[j]>Temp){
				for(k=i;k>j;--k)
					Data[k]=Data[k-1];
				Data[j]=Temp;
				break;
			}
		}
	}
}
//冒泡排序
void MaoPao(int Data[],int Datalon){
	int i,j,swap;
	for(i=0;i<Datalon-1;i++){
		for(j=0;j<Datalon-1-i;j++){
			if(Data[j]>Data[j+1]){
				swap=Data[j];
				Data[j]=Data[j+1];
				Data[j+1]=swap;
			}
		}
	}
}

void main(){
	int Data[5];
	int i;
	for(i=0;i<5;i++){
		scanf("%d",&Data[i]);
	}
	MaoPao(Data,5);
		for(i=0;i<5;i++){
		printf("%d ",Data[i]);
	}
}
#include <stdio.h>
#include <stdlib.h>
void Dijkstra(int n,int v,int dist[],int prev[],int **cost){
	int i,j,maxint=65535,*s,temp,u;
	s=(int *)malloc(sizeof(int) *n);
	for(i=1;i<n;i++){
		dist[i]=cost[v][i];
		s[i]=0;
		if(dist[i]==maxint)
			prev[i]=0;
		else
			prev[i]=v;
	}
	dist[v]=0;
	s[v]=1;
	for(i=1;i<n;i++)
	{
		temp=maxint;
		u=v;
		for(j=1;j<=n;j++){
			if((!s[j])&&(dist[j]<temp)){
				u=j;
				temp=dist[j];
			}
		}
		s[u]=1;
		for(j=1;j<=n;j++){
			if((!s[j])&&(cost[u][j]<maxint)){
				int newdist=dist[u]+cost[u][j];
				if(newdist<dist[j]){
					dist[j]=newdist;
					prev[j]=u;
				}
			}
		}
	}
}
void ShowPath(int n,int v,int u,int *dist,int *prev){
	int j=0,w=u,count=0,*way;
	way=(int *)malloc(sizeof(int)*(n+1));
	while(w!=v){
		count++;
		way[count]=prev[w];
		w=prev[w];
	}
	printf("路径为：\n");
	for(j=count;j>=1;j--){
		printf("%d->",way[j]);
	}
	printf("%d\n",u);
}
void main(){
	int i,j,t,n,v,**cost,*dist,*prev;
	printf("请输入结点数\n");
	scanf("%d",&n);
	printf("请输入结点\n");
	cost=(int **)malloc(sizeof(int)*(n+1));
	for(i=1;i<=n;i++)
		cost[i]=(int *)malloc(sizeof(int)*(n+1));
	for(i=1;i<=n;i++)
		for(t=1;t<=n;t++)
			scanf("%d",&cost[i][t]);
		dist=(int *)malloc(sizeof(int)*n);
		prev=(int *)malloc(sizeof(int)*n);
		printf("请输入源结点\n");
		scanf("%d",&v);
		Dijkstra(n,v,dist,prev,cost);
		printf("最短路径为：\n");
		for(i=1;i<=n;i++){
			if(i!=v){
				printf("%d 到 %d 的距离为 %d:",v,i,dist[i]);
				printf("%d %d",i,prev[i]);
				ShowPath(n,v,i,dist,prev);
			}
		}
}















