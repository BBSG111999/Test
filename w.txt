package com.bjwl.Test2;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * 群聊终结版 服务器端
 * 
 * @author 吴超
 *
 */
public class Test10 {
	private static CopyOnWriteArrayList<Channel> all = new CopyOnWriteArrayList<>();

	public static void main(String[] args) throws IOException {
		System.out.println("---Java聊天室已启动r---");
		@SuppressWarnings("resource")
		ServerSocket Server = new ServerSocket(8080);
		while (true) {
			Socket user = Server.accept();
			Channel users = new Channel(user);
			System.out.println(users.name + "已加入聊天室");
			all.add(users);
			new Thread(users).start();
		}

	}

	static class Channel implements Runnable {
		private Socket user;
		private DataInputStream dis;
		private DataOutputStream dos;
		private boolean isRunning;
		private String name;

		public Channel(Socket user) {
			this.user = user;
			try {
				dis = new DataInputStream(user.getInputStream());
				this.name = Receive();
				dos = new DataOutputStream(user.getOutputStream());
				isRunning = true;
			} catch (IOException e) {
				Del();
			}

		}

		@Override
		public void run() {
			SendOther("欢迎加入Java聊天室", true);
			SendOther(this.name + "来到了聊天室", false);
			String msg = "";
			while (isRunning) {
				msg = Receive();
				if (!msg.equals("")) {
					SendOther(this.name + "对大家说：" + msg, false);
				}
			}
		}

		// 接收消息
		public String Receive() {
			String msg = "";
			try {
				msg = dis.readUTF();
			} catch (IOException e) {
				Del();
				System.out.println("Server Receive Error");
			}
			return msg;
		}

		/**
		 * 
		 * 群聊： 获取自己的消息，发送给其他人 私聊：约定数据格式：@xxx:msg
		 *
		 */

		public void SendOther(String msg, boolean isSystem) {
			int isPrivate = msg.indexOf("@");
			if (isPrivate >= 0) {
				int index = msg.indexOf(":");
				String Privatename = msg.substring(isPrivate + 1, index);
				msg = msg.substring(index + 1);
				for (Channel other : all) {
					if (other.name.equals(Privatename)) {
						other.Send(this.name + "对你说：" + msg);
					}
				}
			} else {
				if (isSystem) {
					Send(msg);
				} else {
					for (Channel user : all) {
						if (user == this) {
							continue;
						} else {
							user.Send(msg);
						}
					}
				}
			}

		}

		// 发送消息
		public void Send(String msg) {
			try {
				dos.writeUTF(msg);
				dos.flush();
			} catch (IOException e) {
				Del();
				System.out.println("Server Send Error");
			}
		}

		// 释放资源
		public void Del() {
			this.isRunning = false;
			all.remove(this);
			SendOther(this.name + "离开了聊天室", false);
			if (null != dis) {
				try {
					dis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (null != user) {
				try {
					user.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (null != dos) {
				try {
					dos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.bjwl.Test2;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;
/**
 * 熟悉TCP服务器
 * 
 * 
 * 客户端
 * @author 吴超
 *
 */
public class Test11 {
	public static void main(String[] args) throws UnknownHostException, IOException {
		System.out.println("---User---");
		System.out.println("请输入用户名");
		BufferedReader bReader = new BufferedReader(new InputStreamReader(System.in));
		Socket user = new Socket("localhost", 8080);
		new Thread(new Test12(user, bReader.readLine())).start();
		new Thread(new Test13(user)).start();
	}

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.bjwl.Test2;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;

/**
 * 群聊终结版 用户发送端
 * 
 * @author 吴超
 *
 */
public class Test12 implements Runnable {
	private Socket user;
	private BufferedReader console;
	private DataOutputStream dos;
	private boolean isRunning;
	@SuppressWarnings("unused")
	private String name;

	public Test12(Socket user, String name) {
		this.user = user;
		this.name = name;
		console = new BufferedReader(new InputStreamReader(System.in));
		try {
			dos = new DataOutputStream(user.getOutputStream());
			isRunning = true;
			Send(name);
		} catch (IOException e) {
			Del();
		}
	}

	@Override
	public void run() {
		String msg = "";
		while (isRunning) {
			msg = GetMessage();
			if (msg != "") {
				Send(msg);
			}
		}
	}

	// 获取用户发送的信息
	public String GetMessage() {
		try {
			return console.readLine();
		} catch (IOException e) {
			Del();
			System.out.println("User GetMessage Error");
		}
		return "";
	}

	// 发送消息
	public void Send(String msg) {
		try {
			dos.writeUTF(msg);
		} catch (IOException e) {
			Del();
			System.out.println("User Send Error");
		}
	}

	// 释放资源
	public void Del() {
		this.isRunning = false;
		if (null != dos) {
			try {
				dos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (null != user) {
			try {
				user.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (null != console) {
			try {
				console.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.bjwl.Test2;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

import org.omg.PortableInterceptor.DISCARDING;

/**
 * 群聊终结版 用户接收端
 * 
 * @author 吴超
 *
 */
public class Test13 implements Runnable {
	private Socket user;
	private DataInputStream dis;
	private boolean isRunning;

	public Test13(Socket user) {
		this.user = user;
		try {
			dis = new DataInputStream(user.getInputStream());
			isRunning = true;
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		String msg = "";
		while (isRunning) {
			msg = Receive();
			System.out.println(msg);
		}
	}

	// 接收消息
	public String Receive() {
		String msg = "";
		try {
			msg = dis.readUTF();
		} catch (IOException e) {
			Del();
			System.out.println("User Receive Error");
		}
		return msg;
	}

	public void Del() {
		this.isRunning = false;

		if (null != user) {
			try {
				user.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (null != dis) {
			try {
				dis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
